var app = require('../app');
var debug = require('debug')('GlobalCodeNetwork:server');
var http = require('http');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var server = http.createServer(app);
var io = require('socket.io').listen(server);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var rooms = [];

io.on('connection', function(socket){

  socket.emit('update available rooms', {rooms: rooms});
  
  socket.on('host room', function(data) {
    var roomID = Math.floor(Math.random() * 1000);

    socket.join(roomID, function() {
      rooms.push(roomID);
      socket.emit('new room');

      var helpRequest = {
        id: roomID,
        description: data.description
      };

      socket.broadcast.emit('update available rooms', {rooms: rooms})

    });
  });

  socket.on('chat message', function(msg) {
    io.emit('chat message', msg);
  });

});



function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
